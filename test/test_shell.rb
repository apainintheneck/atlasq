# frozen_string_literal: true

require "test_helper"

class ShellTest < Minitest::Test
  FIXTURE_DIRECTORY = File.absolute_path("fixtures", __dir__).freeze

  # @param file_name [String]
  # @return [String] file contents
  def fixture(file_name)
    path = File.absolute_path(file_name, FIXTURE_DIRECTORY)
    File.read(path)
  end

  #
  # COUNTRY
  #
  def test_country_output
    expected_output = <<~OUTPUT
      *
      * Country: The Commonwealth of Australia
      * * * * * * * * * * * * * * * * * * * * * *
      (ðŸ‡¦ðŸ‡º | 036 | AU | AUS | Australia)
       | Languages: English
        | Nationality: Australian
         | Region: Australia and New Zealand
          | Continent: Australia
           | Currency: $ Australian Dollar
            |________________________________________
    OUTPUT

    commands = %w[-c --country --countries]
    countries = %w[AU AUS 036 Australia Awstraaliya]

    commands.product(countries).each do |args|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!(args)
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_country_partial_match_output
    expected_output = <<~OUTPUT
      *
      * Countries (Partial Match)
      * * * * * * * * * * * * * * *
      (ðŸ‡¦ðŸ‡ª | 784 | AE | ARE | United Arab Emirates)
      (ðŸ‡¬ðŸ‡§ | 826 | GB | GBR | United Kingdom of Great Britain and Northern Ireland)
      (ðŸ‡²ðŸ‡½ | 484 | MX | MEX | Mexico)
      (ðŸ‡¹ðŸ‡¿ | 834 | TZ | TZA | Tanzania, United Republic of)
      (ðŸ‡ºðŸ‡² | 581 | UM | UMI | United States Minor Outlying Islands)
      (ðŸ‡ºðŸ‡¸ | 840 | US | USA | United States of America)
      (ðŸ‡»ðŸ‡® | 850 | VI | VIR | Virgin Islands (U.S.))
    OUTPUT

    %w[-c --country --countries].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command, "united"])
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_all_countries_output
    expected_output = fixture("all_countries_output.txt")

    %w[-c --country --countries].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command])
      end

      assert_equal expected_output, actual_output
    end
  end

  #
  # Region
  #
  def test_region_output
    expected_output = <<~OUTPUT
      *
      * Region: Oceania
      * * * * * * * * * *
      (ðŸ‡¦ðŸ‡¸ | 016 | AS | ASM | American Samoa)
      (ðŸ‡¦ðŸ‡º | 036 | AU | AUS | Australia)
      (ðŸ‡¨ðŸ‡¨ | 166 | CC | CCK | Cocos (Keeling) Islands)
      (ðŸ‡¨ðŸ‡° | 184 | CK | COK | Cook Islands)
      (ðŸ‡¨ðŸ‡½ | 162 | CX | CXR | Christmas Island)
      (ðŸ‡«ðŸ‡¯ | 242 | FJ | FJI | Fiji)
      (ðŸ‡«ðŸ‡² | 583 | FM | FSM | Micronesia (Federated States of))
      (ðŸ‡¬ðŸ‡º | 316 | GU | GUM | Guam)
      (ðŸ‡°ðŸ‡® | 296 | KI | KIR | Kiribati)
      (ðŸ‡²ðŸ‡­ | 584 | MH | MHL | Marshall Islands)
      (ðŸ‡²ðŸ‡µ | 580 | MP | MNP | Northern Mariana Islands)
      (ðŸ‡³ðŸ‡¨ | 540 | NC | NCL | New Caledonia)
      (ðŸ‡³ðŸ‡« | 574 | NF | NFK | Norfolk Island)
      (ðŸ‡³ðŸ‡· | 520 | NR | NRU | Nauru)
      (ðŸ‡³ðŸ‡º | 570 | NU | NIU | Niue)
      (ðŸ‡³ðŸ‡¿ | 554 | NZ | NZL | New Zealand)
      (ðŸ‡µðŸ‡« | 258 | PF | PYF | French Polynesia)
      (ðŸ‡µðŸ‡¬ | 598 | PG | PNG | Papua New Guinea)
      (ðŸ‡µðŸ‡³ | 612 | PN | PCN | Pitcairn)
      (ðŸ‡µðŸ‡¼ | 585 | PW | PLW | Palau)
      (ðŸ‡¸ðŸ‡§ | 090 | SB | SLB | Solomon Islands)
      (ðŸ‡¹ðŸ‡° | 772 | TK | TKL | Tokelau)
      (ðŸ‡¹ðŸ‡´ | 776 | TO | TON | Tonga)
      (ðŸ‡¹ðŸ‡» | 798 | TV | TUV | Tuvalu)
      (ðŸ‡»ðŸ‡º | 548 | VU | VUT | Vanuatu)
      (ðŸ‡¼ðŸ‡« | 876 | WF | WLF | Wallis and Futuna)
      (ðŸ‡¼ðŸ‡¸ | 882 | WS | WSM | Samoa)
    OUTPUT

    %w[-r --region --regions].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command, "oceania"])
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_subregion_output
    expected_output = <<~OUTPUT
      *
      * Region: Central Asia
      * * * * * * * * * * * * *
      (ðŸ‡°ðŸ‡¬ | 417 | KG | KGZ | Kyrgyzstan)
      (ðŸ‡°ðŸ‡¿ | 398 | KZ | KAZ | Kazakhstan)
      (ðŸ‡¹ðŸ‡¯ | 762 | TJ | TJK | Tajikistan)
      (ðŸ‡¹ðŸ‡² | 795 | TM | TKM | Turkmenistan)
      (ðŸ‡ºðŸ‡¿ | 860 | UZ | UZB | Uzbekistan)
    OUTPUT

    %w[-r --region --regions].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command, "central asia"])
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_world_region_output
    expected_output = <<~OUTPUT
      *
      * Region: North, Central and South America (AMER)
      * * * * * * * * * * * * * * * * * * * * * * * * * *
      (ðŸ‡¦ðŸ‡¬ | 028 | AG | ATG | Antigua and Barbuda)
      (ðŸ‡¦ðŸ‡® | 660 | AI | AIA | Anguilla)
      (ðŸ‡¦ðŸ‡¶ | 010 | AQ | ATA | Antarctica)
      (ðŸ‡¦ðŸ‡· | 032 | AR | ARG | Argentina)
      (ðŸ‡¦ðŸ‡¼ | 533 | AW | ABW | Aruba)
      (ðŸ‡§ðŸ‡§ | 052 | BB | BRB | Barbados)
      (ðŸ‡§ðŸ‡² | 060 | BM | BMU | Bermuda)
      (ðŸ‡§ðŸ‡´ | 068 | BO | BOL | Bolivia (Plurinational State of))
      (ðŸ‡§ðŸ‡· | 076 | BR | BRA | Brazil)
      (ðŸ‡§ðŸ‡¸ | 044 | BS | BHS | Bahamas)
      (ðŸ‡§ðŸ‡¿ | 084 | BZ | BLZ | Belize)
      (ðŸ‡¨ðŸ‡¦ | 124 | CA | CAN | Canada)
      (ðŸ‡¨ðŸ‡± | 152 | CL | CHL | Chile)
      (ðŸ‡¨ðŸ‡´ | 170 | CO | COL | Colombia)
      (ðŸ‡¨ðŸ‡· | 188 | CR | CRI | Costa Rica)
      (ðŸ‡¨ðŸ‡º | 192 | CU | CUB | Cuba)
      (ðŸ‡¨ðŸ‡¼ | 531 | CW | CUW | CuraÃ§ao)
      (ðŸ‡©ðŸ‡² | 212 | DM | DMA | Dominica)
      (ðŸ‡©ðŸ‡´ | 214 | DO | DOM | Dominican Republic)
      (ðŸ‡ªðŸ‡¨ | 218 | EC | ECU | Ecuador)
      (ðŸ‡«ðŸ‡° | 238 | FK | FLK | Falkland Islands (Malvinas))
      (ðŸ‡¬ðŸ‡© | 308 | GD | GRD | Grenada)
      (ðŸ‡¬ðŸ‡« | 254 | GF | GUF | French Guiana)
      (ðŸ‡¬ðŸ‡µ | 312 | GP | GLP | Guadeloupe)
      (ðŸ‡¬ðŸ‡¸ | 239 | GS | SGS | South Georgia and the South Sandwich Islands)
      (ðŸ‡¬ðŸ‡¹ | 320 | GT | GTM | Guatemala)
      (ðŸ‡¬ðŸ‡¾ | 328 | GY | GUY | Guyana)
      (ðŸ‡­ðŸ‡³ | 340 | HN | HND | Honduras)
      (ðŸ‡­ðŸ‡¹ | 332 | HT | HTI | Haiti)
      (ðŸ‡¯ðŸ‡² | 388 | JM | JAM | Jamaica)
      (ðŸ‡°ðŸ‡³ | 659 | KN | KNA | Saint Kitts and Nevis)
      (ðŸ‡°ðŸ‡¾ | 136 | KY | CYM | Cayman Islands)
      (ðŸ‡±ðŸ‡¨ | 662 | LC | LCA | Saint Lucia)
      (ðŸ‡²ðŸ‡« | 663 | MF | MAF | Saint Martin (French part))
      (ðŸ‡²ðŸ‡¶ | 474 | MQ | MTQ | Martinique)
      (ðŸ‡²ðŸ‡½ | 484 | MX | MEX | Mexico)
      (ðŸ‡³ðŸ‡® | 558 | NI | NIC | Nicaragua)
      (ðŸ‡µðŸ‡¦ | 591 | PA | PAN | Panama)
      (ðŸ‡µðŸ‡ª | 604 | PE | PER | Peru)
      (ðŸ‡µðŸ‡² | 666 | PM | SPM | Saint Pierre and Miquelon)
      (ðŸ‡µðŸ‡· | 630 | PR | PRI | Puerto Rico)
      (ðŸ‡µðŸ‡¾ | 600 | PY | PRY | Paraguay)
      (ðŸ‡¸ðŸ‡· | 740 | SR | SUR | Suriname)
      (ðŸ‡¸ðŸ‡» | 222 | SV | SLV | El Salvador)
      (ðŸ‡¸ðŸ‡½ | 534 | SX | SXM | Sint Maarten (Dutch part))
      (ðŸ‡¹ðŸ‡¹ | 780 | TT | TTO | Trinidad and Tobago)
      (ðŸ‡ºðŸ‡² | 581 | UM | UMI | United States Minor Outlying Islands)
      (ðŸ‡ºðŸ‡¸ | 840 | US | USA | United States of America)
      (ðŸ‡ºðŸ‡¾ | 858 | UY | URY | Uruguay)
      (ðŸ‡»ðŸ‡¨ | 670 | VC | VCT | Saint Vincent and the Grenadines)
      (ðŸ‡»ðŸ‡ª | 862 | VE | VEN | Venezuela (Bolivarian Republic of))
      (ðŸ‡»ðŸ‡¬ | 092 | VG | VGB | Virgin Islands (British))
      (ðŸ‡»ðŸ‡® | 850 | VI | VIR | Virgin Islands (U.S.))
    OUTPUT

    %w[-r --region --regions].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command, "AMER"])
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_continent_output
    expected_output = <<~OUTPUT
      *
      * Region: Antarctica
      * * * * * * * * * * * *
      (ðŸ‡¦ðŸ‡¶ | 010 | AQ | ATA | Antarctica)
      (ðŸ‡§ðŸ‡» | 074 | BV | BVT | Bouvet Island)
      (ðŸ‡¬ðŸ‡¸ | 239 | GS | SGS | South Georgia and the South Sandwich Islands)
      (ðŸ‡­ðŸ‡² | 334 | HM | HMD | Heard Island and McDonald Islands)
    OUTPUT

    %w[-r --region --regions].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command, "antarctica"])
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_all_regions_output
    expected_output = fixture("all_regions_output.txt")

    %w[-r --region --regions].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command])
      end

      assert_equal expected_output, actual_output
    end
  end

  #
  # Currency
  #
  def test_currency_output
    expected_output = <<~OUTPUT
      *
      * Currency: [BHD] Ø¯.Ø¨ Bahraini Dinar
      * * * * * * * * * * * * * * * * * * * *
      (ðŸ‡§ðŸ‡­ | 048 | BH | BHR | Bahrain)
    OUTPUT

    commands = %w[-m --money]
    currencies = ["BHD", "048", "Bahraini Dinar"]

    commands.product(currencies).each do |args|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!(args)
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_currency_partial_match_output
    expected_output = <<~OUTPUT
      *
      * Currencies (Partial Match)
      * * * * * * * * * * * * * * * *
      - [EGP] Ø¬.Ù… Egyptian Pound
          (ðŸ‡ªðŸ‡¬ | 818 | EG | EGY | Egypt)
      - [FKP] Â£ Falkland Pound
          (ðŸ‡«ðŸ‡° | 238 | FK | FLK | Falkland Islands (Malvinas))
      - [GBP] Â£ British Pound
          (ðŸ‡¬ðŸ‡§ | 826 | GB | GBR | United Kingdom of Great Britain and Northern Ireland)
          (ðŸ‡¬ðŸ‡¬ | 831 | GG | GGY | Guernsey)
          (ðŸ‡¬ðŸ‡¸ | 239 | GS | SGS | South Georgia and the South Sandwich Islands)
          (ðŸ‡®ðŸ‡² | 833 | IM | IMN | Isle of Man)
          (ðŸ‡¯ðŸ‡ª | 832 | JE | JEY | Jersey)
      - [GIP] Â£ Gibraltar Pound
          (ðŸ‡¬ðŸ‡® | 292 | GI | GIB | Gibraltar)
      - [LBP] Ù„.Ù„ Lebanese Pound
          (ðŸ‡±ðŸ‡§ | 422 | LB | LBN | Lebanon)
      - [SDG] Â£ Sudanese Pound
          (ðŸ‡¸ðŸ‡© | 729 | SD | SDN | Sudan)
      - [SHP] Â£ Saint Helenian Pound
          (ðŸ‡¸ðŸ‡­ | 654 | SH | SHN | Saint Helena, Ascension and Tristan da Cunha)
      - [SSP] Â£ South Sudanese Pound
          (ðŸ‡¸ðŸ‡¸ | 728 | SS | SSD | South Sudan)
      - [SYP] Â£S Syrian Pound
          (ðŸ‡¸ðŸ‡¾ | 760 | SY | SYR | Syrian Arab Republic)
    OUTPUT

    %w[-m --money].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command, "pound"])
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_all_currencies_output
    expected_output = fixture("all_currencies_output.txt")

    %w[-m --money].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command])
      end

      assert_equal expected_output, actual_output
    end
  end

  #
  # Language
  #
  def test_language_output
    expected_output = <<~OUTPUT
      *
      * Language: (may/ms) Malay
      * * * * * * * * * * * * * * *
      (ðŸ‡§ðŸ‡³ | 096 | BN | BRN | Brunei Darussalam)
      (ðŸ‡¨ðŸ‡½ | 162 | CX | CXR | Christmas Island)
      (ðŸ‡²ðŸ‡¾ | 458 | MY | MYS | Malaysia)
      (ðŸ‡¸ðŸ‡¬ | 702 | SG | SGP | Singapore)
    OUTPUT

    commands = %w[-l --language --languages]
    currencies = %w[ms may]

    commands.product(currencies).each do |args|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!(args)
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_language_partial_match_output
    expected_output = <<~OUTPUT
      *
      * Languages (Partial Match)
      * * * * * * * * * * * * * * *
      - (div/dv) Divehi; Dhivehi; Maldivian
          (ðŸ‡²ðŸ‡» | 462 | MV | MDV | Maldives)
    OUTPUT

    %w[-l --language --languages].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command, "Maldivian"])
      end

      assert_equal expected_output, actual_output
    end
  end

  def test_all_languages_output
    expected_output = fixture("all_languages_output.txt")

    %w[-l --language --languages].each do |command|
      actual_output, _err = capture_io do
        Atlasq::Shell.start!([command])
      end

      assert_equal expected_output, actual_output
    end
  end
end
